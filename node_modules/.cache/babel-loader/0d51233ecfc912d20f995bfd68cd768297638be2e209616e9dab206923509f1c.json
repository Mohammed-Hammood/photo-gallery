{"ast":null,"code":"var _jsxFileName = \"/home/mohammed/worldoftechnology/project-images/client/src/components/modal/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { Suspense, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Loader, SVG } from 'components';\nimport Forms from 'components/forms';\nimport 'styles/common/modal.scss';\n\n// const Forms = React.lazy(()=> import('../forms'));\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Modal(props) {\n  _s();\n  const {\n    maxWidth,\n    isVisible,\n    closeButton,\n    title,\n    form,\n    setIsVisible,\n    fullScreen,\n    darkLightMode\n  } = props;\n  const [modal, setModal] = useState({\n    form: form,\n    closeButton,\n    title,\n    maxWidth: maxWidth || \"maxWidth600\",\n    fullScreen,\n    lightDarkMode: darkLightMode\n  });\n  const {\n    t,\n    i18n\n  } = useTranslation('translation');\n  const rtl = [\"ar\", \"arabic\"].includes(i18n.language) ? false : true;\n  const maxWidthRef = React.useRef(modal.maxWidth !== 'fullScreen' ? modal.maxWidth : \"maxWidth600\");\n  useEffect(() => {\n    const body = document.getElementsByTagName(\"body\")[0];\n    if (body && isVisible) {\n      //to prevent scrolling when modal is open\n      body.style.overflowY = \"hidden\";\n    }\n    document.addEventListener('keyup', handleKeyUp);\n    function handleKeyUp(e) {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        document.removeEventListener('keyup', handleKeyUp);\n        setIsVisible(false);\n      }\n    }\n    return () => {\n      document.removeEventListener('keyup', handleKeyUp);\n      if (body && isVisible) {\n        //to reset scrolling when modal is closed\n        body.style.overflowY = \"auto\";\n      }\n    };\n  }, [modal, isVisible, setIsVisible]);\n  const modalToggle = (value, element) => {\n    if (element && element.className.toString().includes('modal') || !element) {\n      document.body.style.overflowY = 'auto';\n      setIsVisible(value);\n    }\n  };\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    onClick: e => modalToggle(false, e.target),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${modal.maxWidth} ${modal.lightDarkMode}`,\n      children: [modal.title || modal.closeButton || modal.fullScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: modal.title ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `title ${rtl ? \"capitalizeFirstLetter\" : \"\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: t(modal.title)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 96\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setModal({\n              ...modal,\n              lightDarkMode: modal.lightDarkMode === 'darkMode' ? \"lightMode\" : \"darkMode\"\n            }),\n            title: t(darkLightMode ? 'Light mode' : 'Dark mode') || '',\n            children: /*#__PURE__*/_jsxDEV(SVG, {\n              color: \"black\",\n              name: \"half-circle-stroke-solid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), modal.fullScreen === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setModal({\n              ...modal,\n              maxWidth: modal.maxWidth === 'fullScreen' ? maxWidthRef.current : \"fullScreen\"\n            }),\n            title: t('Full screen') || '',\n            children: /*#__PURE__*/_jsxDEV(SVG, {\n              color: \"black\",\n              name: modal.maxWidth === 'fullScreen' ? \"compress-solid\" : 'expand-solid'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this) : null, modal.closeButton === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"closeButton\",\n            onClick: () => modalToggle(false),\n            title: t('Close the window') || '',\n            children: /*#__PURE__*/_jsxDEV(SVG, {\n              color: \"black\",\n              name: \"xmark-solid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(Loader, {\n            size: 100,\n            minHeight: 200\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 41\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(Forms, {\n            modal: modal,\n            setModal: setModal,\n            props: props,\n            setIsVisible: value => modalToggle(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Modal, \"kQpJPqnjH8J360haTCRQSK+Qtyc=\", false, function () {\n  return [useTranslation];\n});\n_c = Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","Suspense","useEffect","useState","useTranslation","Loader","SVG","Forms","jsxDEV","_jsxDEV","Modal","props","_s","maxWidth","isVisible","closeButton","title","form","setIsVisible","fullScreen","darkLightMode","modal","setModal","lightDarkMode","t","i18n","rtl","includes","language","maxWidthRef","useRef","body","document","getElementsByTagName","style","overflowY","addEventListener","handleKeyUp","e","key","preventDefault","removeEventListener","modalToggle","value","element","className","toString","onClick","target","children","fileName","_jsxFileName","lineNumber","columnNumber","color","name","current","fallback","size","minHeight","_c","$RefreshReg$"],"sources":["/home/mohammed/worldoftechnology/project-images/client/src/components/modal/index.tsx"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react';\nimport {  FormsNames, ModalTypes } from 'libs/types';\nimport { useTranslation } from 'react-i18next';\nimport { Loader, SVG } from 'components';\nimport Forms from 'components/forms';\nimport 'styles/common/modal.scss'\n\n// const Forms = React.lazy(()=> import('../forms'));\n\n\ninterface Props {\n    form: FormsNames\n    isVisible: boolean;\n    setIsVisible: (value: boolean) => void;\n    closeButton?: boolean;\n    maxWidth?: ModalTypes['maxWidth'];\n    darkLightMode?: ModalTypes['lightDarkMode'];\n    fullScreen?: boolean;\n    background?: string;\n    border?: string;\n    title?: string;\n}\n\n\nexport default function Modal(props: Props) {\n    const { maxWidth, isVisible, closeButton, title, form, setIsVisible, fullScreen, darkLightMode } = props;\n    const [modal, setModal] = useState<ModalTypes>({ form: form, closeButton, title, maxWidth: maxWidth || \"maxWidth600\", fullScreen, lightDarkMode: darkLightMode });\n    const { t, i18n } = useTranslation('translation');\n    const rtl: boolean = [\"ar\", \"arabic\"].includes(i18n.language) ? false : true;\n    const maxWidthRef = React.useRef(modal.maxWidth !== 'fullScreen'? modal.maxWidth: \"maxWidth600\");\n    useEffect(() => {\n        const body = document.getElementsByTagName((\"body\"))[0] as HTMLBodyElement;\n        if(body && isVisible){\n            //to prevent scrolling when modal is open\n            body.style.overflowY = \"hidden\";\n        }\n        document.addEventListener('keyup', handleKeyUp);\n        function handleKeyUp(e: KeyboardEvent) {\n            if (e.key === 'Escape') {\n                e.preventDefault();\n                document.removeEventListener('keyup', handleKeyUp);\n                setIsVisible(false);\n            }\n        }\n        return (): void => {\n            document.removeEventListener('keyup', handleKeyUp);\n            if(body && isVisible){\n                //to reset scrolling when modal is closed\n                body.style.overflowY = \"auto\";\n            }\n        }\n    }, [modal, isVisible, setIsVisible]);\n    const modalToggle = (value: boolean, element?: HTMLElement): void => {\n        if ((element && element.className.toString().includes('modal')) || !element) {\n            document.body.style.overflowY = 'auto';\n            setIsVisible(value);\n        }\n    }\n    if (!isVisible) return null;\n    return (\n        <div className={\"modal\"} onClick={(e) => modalToggle(false, (e.target as HTMLDivElement))}>\n            <div className={`${modal.maxWidth} ${modal.lightDarkMode}`}>\n                {modal.title || modal.closeButton || modal.fullScreen ?\n                    <div className='header'>\n                        <div>\n                            {modal.title ?\n                                <div className={`title ${rtl ? \"capitalizeFirstLetter\" : \"\"}`}><span>{t(modal.title)}</span></div>\n                                : null}\n                        </div>\n                        <div>\n                            <button onClick={() => setModal({ ...modal, lightDarkMode: modal.lightDarkMode === 'darkMode' ? \"lightMode\" : \"darkMode\" })} title={t(darkLightMode ? 'Light mode' : 'Dark mode') || ''}>\n                                <SVG color=\"black\" name=\"half-circle-stroke-solid\" />\n                            </button>\n                            {modal.fullScreen === true ?\n                                <button onClick={() => setModal({ ...modal, maxWidth: modal.maxWidth === 'fullScreen' ? maxWidthRef.current : \"fullScreen\" })} title={t('Full screen') || ''}>\n                                    <SVG color=\"black\" name={modal.maxWidth === 'fullScreen' ? \"compress-solid\" : 'expand-solid'} />\n                                </button>\n                                : null}\n\n                            {modal.closeButton === true ?\n                                <button className='closeButton' onClick={() => modalToggle(false)} title={t('Close the window') || ''}>\n                                    <SVG color=\"black\" name='xmark-solid' />\n                                </button>\n                                : null}\n                        </div>\n                    </div>\n                    : null}\n                <div className='body'>\n                    <Suspense fallback={<Loader size={100} minHeight={200} />}>\n                        <Forms modal={modal} setModal={setModal} props={props} {...{ setIsVisible: (value: boolean) => modalToggle(value) }} />\n                    </Suspense>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}